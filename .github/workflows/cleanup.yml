name: Cleanup

on:
  schedule:
    # Ejecutar cada domingo a las 2:00 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  # Job de limpieza de branches
  cleanup-branches:
    name: üßπ Limpiar Branches
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: üßπ Limpiar branches obsoletos
        uses: actions/github-script@v7
        with:
          script: |
            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const protectedBranches = ['main', 'develop'];
            const branchesToDelete = branches.filter(branch => 
              !protectedBranches.includes(branch.name) &&
              !branch.name.startsWith('release/') &&
              !branch.name.startsWith('hotfix/')
            );
            
            console.log(`Encontradas ${branchesToDelete.length} branches para limpiar`);
            
            for (const branch of branchesToDelete) {
              try {
                // Verificar si la branch tiene commits recientes
                const { data: commits } = await github.rest.repos.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: branch.name,
                  per_page: 1
                });
                
                if (commits.length > 0) {
                  const lastCommit = commits[0];
                  const lastCommitDate = new Date(lastCommit.commit.committer.date);
                  const thirtyDaysAgo = new Date();
                  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
                  
                  if (lastCommitDate < thirtyDaysAgo) {
                    console.log(`Eliminando branch obsoleta: ${branch.name}`);
                    await github.rest.git.deleteRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `heads/${branch.name}`
                    });
                  }
                }
              } catch (error) {
                console.log(`Error eliminando branch ${branch.name}: ${error.message}`);
              }
            }

  # Job de limpieza de releases
  cleanup-releases:
    name: üßπ Limpiar Releases
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: üßπ Limpiar releases obsoletos
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const releasesToDelete = releases.filter(release => 
              release.draft === true ||
              (release.prerelease === true && new Date(release.created_at) < new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))
            );
            
            console.log(`Encontradas ${releasesToDelete.length} releases para limpiar`);
            
            for (const release of releasesToDelete) {
              try {
                console.log(`Eliminando release: ${release.tag_name}`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
              } catch (error) {
                console.log(`Error eliminando release ${release.tag_name}: ${error.message}`);
              }
            }

  # Job de limpieza de workflows
  cleanup-workflows:
    name: üßπ Limpiar Workflows
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: üßπ Limpiar runs obsoletos
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflows } = await github.rest.actions.listWorkflowsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            for (const workflow of workflows) {
              try {
                const { data: runs } = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflow.id,
                  status: 'completed',
                  per_page: 100
                });
                
                const runsToDelete = runs.workflow_runs.filter(run => 
                  run.conclusion === 'cancelled' ||
                  run.conclusion === 'skipped' ||
                  (run.conclusion === 'failure' && new Date(run.created_at) < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000))
                );
                
                console.log(`Encontrados ${runsToDelete.length} runs para limpiar en workflow ${workflow.name}`);
                
                for (const run of runsToDelete) {
                  try {
                    await github.rest.actions.deleteWorkflowRun({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      run_id: run.id
                    });
                  } catch (error) {
                    console.log(`Error eliminando run ${run.id}: ${error.message}`);
                  }
                }
              } catch (error) {
                console.log(`Error procesando workflow ${workflow.name}: ${error.message}`);
              }
            }

  # Job de reporte de limpieza
  cleanup-report:
    name: üìä Reporte de Limpieza
    runs-on: ubuntu-latest
    needs: [cleanup-branches, cleanup-releases, cleanup-workflows]
    if: always()
    
    steps:
      - name: üìä Resumen de limpieza
        run: |
          echo "## üßπ Cleanup Report" >> $GITHUB_STEP_SUMMARY
          echo "| Componente | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Branches | ${{ needs.cleanup-branches.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Releases | ${{ needs.cleanup-releases.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Workflows | ${{ needs.cleanup-workflows.result }} |" >> $GITHUB_STEP_SUMMARY
          
      - name: üéâ Limpieza exitosa
        if: needs.cleanup-branches.result == 'success' && needs.cleanup-releases.result == 'success' && needs.cleanup-workflows.result == 'success'
        run: |
          echo "‚úÖ Limpieza completada exitosamente"
          echo "üßπ Branches obsoletas eliminadas"
          echo "üßπ Releases obsoletas eliminadas"
          echo "üßπ Workflow runs obsoletos eliminados"
          
      - name: ‚ùå Limpieza fall√≥
        if: needs.cleanup-branches.result == 'failure' || needs.cleanup-releases.result == 'failure' || needs.cleanup-workflows.result == 'failure'
        run: |
          echo "‚ùå Limpieza fall√≥"
          echo "Revisa los logs para m√°s detalles"
